//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var world_ttypes = require('./world_types')


var ttypes = module.exports = {};
Player = module.exports.Player = function(args) {
  this.id = null;
  this.script = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.script !== undefined) {
      this.script = args.script;
    }
  }
};
Player.prototype = {};
Player.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.script = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player.prototype.write = function(output) {
  output.writeStructBegin('Player');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.script !== null && this.script !== undefined) {
    output.writeFieldBegin('script', Thrift.Type.STRING, 2);
    output.writeString(this.script);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MatchParams = module.exports.MatchParams = function(args) {
  this.players = null;
  if (args) {
    if (args.players !== undefined) {
      this.players = args.players;
    }
  }
};
MatchParams.prototype = {};
MatchParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.players = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Player();
          elem6.read(input);
          this.players.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchParams.prototype.write = function(output) {
  output.writeStructBegin('MatchParams');
  if (this.players !== null && this.players !== undefined) {
    output.writeFieldBegin('players', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.players.length);
    for (var iter7 in this.players)
    {
      if (this.players.hasOwnProperty(iter7))
      {
        iter7 = this.players[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MatchResult = module.exports.MatchResult = function(args) {
  this.winnerId = null;
  if (args) {
    if (args.winnerId !== undefined) {
      this.winnerId = args.winnerId;
    }
  }
};
MatchResult.prototype = {};
MatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.winnerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchResult.prototype.write = function(output) {
  output.writeStructBegin('MatchResult');
  if (this.winnerId !== null && this.winnerId !== undefined) {
    output.writeFieldBegin('winnerId', Thrift.Type.I64, 1);
    output.writeI64(this.winnerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


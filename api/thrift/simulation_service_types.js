//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var world_ttypes = require('./world_types')


var ttypes = module.exports = {};
PlayerInfo = module.exports.PlayerInfo = function(args) {
  this.id = null;
  this.script = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.script !== undefined) {
      this.script = args.script;
    }
  }
};
PlayerInfo.prototype = {};
PlayerInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.script = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerInfo.prototype.write = function(output) {
  output.writeStructBegin('PlayerInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.script !== null && this.script !== undefined) {
    output.writeFieldBegin('script', Thrift.Type.STRING, 2);
    output.writeString(this.script);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MatchParams = module.exports.MatchParams = function(args) {
  this.matchId = null;
  this.players = null;
  this.timeLimitSec = 300;
  if (args) {
    if (args.matchId !== undefined) {
      this.matchId = args.matchId;
    }
    if (args.players !== undefined) {
      this.players = args.players;
    }
    if (args.timeLimitSec !== undefined) {
      this.timeLimitSec = args.timeLimitSec;
    }
  }
};
MatchParams.prototype = {};
MatchParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.matchId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.players = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.PlayerInfo();
          elem6.read(input);
          this.players.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timeLimitSec = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchParams.prototype.write = function(output) {
  output.writeStructBegin('MatchParams');
  if (this.matchId !== null && this.matchId !== undefined) {
    output.writeFieldBegin('matchId', Thrift.Type.STRING, 1);
    output.writeString(this.matchId);
    output.writeFieldEnd();
  }
  if (this.players !== null && this.players !== undefined) {
    output.writeFieldBegin('players', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.players.length);
    for (var iter7 in this.players)
    {
      if (this.players.hasOwnProperty(iter7))
      {
        iter7 = this.players[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeLimitSec !== null && this.timeLimitSec !== undefined) {
    output.writeFieldBegin('timeLimitSec', Thrift.Type.I64, 3);
    output.writeI64(this.timeLimitSec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MatchResult = module.exports.MatchResult = function(args) {
  this.winnerId = null;
  this.elapsedTimeSec = null;
  if (args) {
    if (args.winnerId !== undefined) {
      this.winnerId = args.winnerId;
    }
    if (args.elapsedTimeSec !== undefined) {
      this.elapsedTimeSec = args.elapsedTimeSec;
    }
  }
};
MatchResult.prototype = {};
MatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.winnerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.elapsedTimeSec = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchResult.prototype.write = function(output) {
  output.writeStructBegin('MatchResult');
  if (this.winnerId !== null && this.winnerId !== undefined) {
    output.writeFieldBegin('winnerId', Thrift.Type.STRING, 1);
    output.writeString(this.winnerId);
    output.writeFieldEnd();
  }
  if (this.elapsedTimeSec !== null && this.elapsedTimeSec !== undefined) {
    output.writeFieldBegin('elapsedTimeSec', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.elapsedTimeSec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompilationResult = module.exports.CompilationResult = function(args) {
  this.success = null;
  this.errorType = null;
  this.errorMsg = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.errorType !== undefined) {
      this.errorType = args.errorType;
    }
    if (args.errorMsg !== undefined) {
      this.errorMsg = args.errorMsg;
    }
  }
};
CompilationResult.prototype = {};
CompilationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.errorMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompilationResult.prototype.write = function(output) {
  output.writeStructBegin('CompilationResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.errorType !== null && this.errorType !== undefined) {
    output.writeFieldBegin('errorType', Thrift.Type.STRING, 2);
    output.writeString(this.errorType);
    output.writeFieldEnd();
  }
  if (this.errorMsg !== null && this.errorMsg !== undefined) {
    output.writeFieldBegin('errorMsg', Thrift.Type.STRING, 3);
    output.writeString(this.errorMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SnapshotList = module.exports.SnapshotList = function(args) {
  this.snapshotList = null;
  if (args) {
    if (args.snapshotList !== undefined) {
      this.snapshotList = args.snapshotList;
    }
  }
};

function printPrototype(obj, i) {
    var n = Number(i || 0);
    var indent = Array(2 + n).join("-");

    for(var key in obj) {
        if(obj.hasOwnProperty(key)) {
            console.log(indent, key, ": ", obj[key]);
        }
    }

    if(obj) {
        if(Object.getPrototypeOf) {
            printPrototype(Object.getPrototypeOf(obj), n + 1);
        } else if(obj.__proto__) {
            printPrototype(obj.__proto__, n + 1);
        }
    }
}

SnapshotList.prototype = {};
SnapshotList.prototype.read = function(input) {
  printPrototype(input);
  input.readStructBegin();

  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.snapshotList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new world_ttypes.Snapshot();
          elem14.read(input);
          this.snapshotList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnapshotList.prototype.write = function(output) {
  output.writeStructBegin('SnapshotList');
  if (this.snapshotList !== null && this.snapshotList !== undefined) {
    output.writeFieldBegin('snapshotList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.snapshotList.length);
    for (var iter15 in this.snapshotList)
    {
      if (this.snapshotList.hasOwnProperty(iter15))
      {
        iter15 = this.snapshotList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidArgumentException = module.exports.InvalidArgumentException = function(args) {
  Thrift.TException.call(this, "InvalidArgumentException")
  this.name = "InvalidArgumentException"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(InvalidArgumentException, Thrift.TException);
InvalidArgumentException.prototype.name = 'InvalidArgumentException';
InvalidArgumentException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidArgumentException.prototype.write = function(output) {
  output.writeStructBegin('InvalidArgumentException');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class MatchParams : TBase
{
  private List<PlayerInfo> _players;
  private long _timeLimitSec;

  public List<PlayerInfo> Players
  {
    get
    {
      return _players;
    }
    set
    {
      __isset.players = true;
      this._players = value;
    }
  }

  public long TimeLimitSec
  {
    get
    {
      return _timeLimitSec;
    }
    set
    {
      __isset.timeLimitSec = true;
      this._timeLimitSec = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool players;
    public bool timeLimitSec;
  }

  public MatchParams() {
    this._timeLimitSec = 300;
    this.__isset.timeLimitSec = true;
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.List) {
            {
              Players = new List<PlayerInfo>();
              TList _list0 = iprot.ReadListBegin();
              for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
              {
                PlayerInfo _elem2;
                _elem2 = new PlayerInfo();
                _elem2.Read(iprot);
                Players.Add(_elem2);
              }
              iprot.ReadListEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I64) {
            TimeLimitSec = iprot.ReadI64();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("MatchParams");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (Players != null && __isset.players) {
      field.Name = "players";
      field.Type = TType.List;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Players.Count));
        foreach (PlayerInfo _iter3 in Players)
        {
          _iter3.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (__isset.timeLimitSec) {
      field.Name = "timeLimitSec";
      field.Type = TType.I64;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(TimeLimitSec);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("MatchParams(");
    bool __first = true;
    if (Players != null && __isset.players) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Players: ");
      __sb.Append(Players);
    }
    if (__isset.timeLimitSec) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TimeLimitSec: ");
      __sb.Append(TimeLimitSec);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}


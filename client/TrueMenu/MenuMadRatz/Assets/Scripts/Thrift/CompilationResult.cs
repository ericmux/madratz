/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CompilationResult : TBase
{
  private bool _success;
  private string _errorType;
  private string _errorMsg;

  public bool Success
  {
    get
    {
      return _success;
    }
    set
    {
      __isset.success = true;
      this._success = value;
    }
  }

  public string ErrorType
  {
    get
    {
      return _errorType;
    }
    set
    {
      __isset.errorType = true;
      this._errorType = value;
    }
  }

  public string ErrorMsg
  {
    get
    {
      return _errorMsg;
    }
    set
    {
      __isset.errorMsg = true;
      this._errorMsg = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool success;
    public bool errorType;
    public bool errorMsg;
  }

  public CompilationResult() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.Bool) {
            Success = iprot.ReadBool();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            ErrorType = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            ErrorMsg = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("CompilationResult");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.success) {
      field.Name = "success";
      field.Type = TType.Bool;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Success);
      oprot.WriteFieldEnd();
    }
    if (ErrorType != null && __isset.errorType) {
      field.Name = "errorType";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ErrorType);
      oprot.WriteFieldEnd();
    }
    if (ErrorMsg != null && __isset.errorMsg) {
      field.Name = "errorMsg";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ErrorMsg);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("CompilationResult(");
    bool __first = true;
    if (__isset.success) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Success: ");
      __sb.Append(Success);
    }
    if (ErrorType != null && __isset.errorType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ErrorType: ");
      __sb.Append(ErrorType);
    }
    if (ErrorMsg != null && __isset.errorMsg) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ErrorMsg: ");
      __sb.Append(ErrorMsg);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}


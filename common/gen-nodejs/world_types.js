//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var actor_ttypes = require('./actor_types')


var ttypes = module.exports = {};
Snapshot = module.exports.Snapshot = function(args) {
  this.elapsedTime = null;
  this.actors = null;
  this.finished = null;
  if (args) {
    if (args.elapsedTime !== undefined) {
      this.elapsedTime = args.elapsedTime;
    }
    if (args.actors !== undefined) {
      this.actors = args.actors;
    }
    if (args.finished !== undefined) {
      this.finished = args.finished;
    }
  }
};
Snapshot.prototype = {};
Snapshot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.elapsedTime = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.actors = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new actor_ttypes.Actor();
          elem6.read(input);
          this.actors.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.finished = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Snapshot.prototype.write = function(output) {
  output.writeStructBegin('Snapshot');
  if (this.elapsedTime !== null && this.elapsedTime !== undefined) {
    output.writeFieldBegin('elapsedTime', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.elapsedTime);
    output.writeFieldEnd();
  }
  if (this.actors !== null && this.actors !== undefined) {
    output.writeFieldBegin('actors', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.actors.length);
    for (var iter7 in this.actors)
    {
      if (this.actors.hasOwnProperty(iter7))
      {
        iter7 = this.actors[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.finished !== null && this.finished !== undefined) {
    output.writeFieldBegin('finished', Thrift.Type.BOOL, 3);
    output.writeBool(this.finished);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Actor : TBase
{
  private long _id;
  private Vector2 _position;
  private double _angle;
  private double _hp;
  private double _width;
  private StateChange _stateChange;

  public long Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public Vector2 Position
  {
    get
    {
      return _position;
    }
    set
    {
      __isset.position = true;
      this._position = value;
    }
  }

  public double Angle
  {
    get
    {
      return _angle;
    }
    set
    {
      __isset.angle = true;
      this._angle = value;
    }
  }

  public double Hp
  {
    get
    {
      return _hp;
    }
    set
    {
      __isset.hp = true;
      this._hp = value;
    }
  }

  public double Width
  {
    get
    {
      return _width;
    }
    set
    {
      __isset.width = true;
      this._width = value;
    }
  }

  public StateChange StateChange
  {
    get
    {
      return _stateChange;
    }
    set
    {
      __isset.stateChange = true;
      this._stateChange = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool position;
    public bool angle;
    public bool hp;
    public bool width;
    public bool stateChange;
  }

  public Actor() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I64) {
            Id = iprot.ReadI64();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.Struct) {
            Position = new Vector2();
            Position.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.Double) {
            Angle = iprot.ReadDouble();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.Double) {
            Hp = iprot.ReadDouble();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.Double) {
            Width = iprot.ReadDouble();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 6:
          if (field.Type == TType.Struct) {
            StateChange = new StateChange();
            StateChange.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("Actor");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.id) {
      field.Name = "id";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Id);
      oprot.WriteFieldEnd();
    }
    if (Position != null && __isset.position) {
      field.Name = "position";
      field.Type = TType.Struct;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      Position.Write(oprot);
      oprot.WriteFieldEnd();
    }
    if (__isset.angle) {
      field.Name = "angle";
      field.Type = TType.Double;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Angle);
      oprot.WriteFieldEnd();
    }
    if (__isset.hp) {
      field.Name = "hp";
      field.Type = TType.Double;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Hp);
      oprot.WriteFieldEnd();
    }
    if (__isset.width) {
      field.Name = "width";
      field.Type = TType.Double;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Width);
      oprot.WriteFieldEnd();
    }
    if (StateChange != null && __isset.stateChange) {
      field.Name = "stateChange";
      field.Type = TType.Struct;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      StateChange.Write(oprot);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Actor(");
    bool __first = true;
    if (__isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (Position != null && __isset.position) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Position: ");
      __sb.Append(Position== null ? "<null>" : Position.ToString());
    }
    if (__isset.angle) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Angle: ");
      __sb.Append(Angle);
    }
    if (__isset.hp) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Hp: ");
      __sb.Append(Hp);
    }
    if (__isset.width) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Width: ");
      __sb.Append(Width);
    }
    if (StateChange != null && __isset.stateChange) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StateChange: ");
      __sb.Append(StateChange== null ? "<null>" : StateChange.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

